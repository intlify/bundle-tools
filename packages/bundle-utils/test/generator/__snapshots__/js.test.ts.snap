// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`'allowDynamic' option > generate > code 1`] = `
"const resource = {
  "hello": (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize(["こんにちは"])};fn.source="こんにちは";return fn;})()
}
export default resource"
`;

exports[`'allowDynamic' option > generate > map 1`] = `
{
  "mappings": "",
  "names": [],
  "sources": [],
  "version": 3,
}
`;

exports[`'allowDynamic' option > no generate 1`] = `
{
  "body": [
    {
      "declaration": {
        "async": true,
        "body": {
          "body": [
            {
              "declarations": [
                {
                  "end": 116,
                  "id": {
                    "end": 61,
                    "name": "json",
                    "start": 57,
                    "type": "Identifier",
                  },
                  "init": {
                    "argument": {
                      "arguments": [
                        {
                          "async": false,
                          "body": {
                            "arguments": [],
                            "callee": {
                              "computed": false,
                              "end": 113,
                              "object": {
                                "end": 108,
                                "name": "response",
                                "start": 100,
                                "type": "Identifier",
                              },
                              "optional": false,
                              "property": {
                                "end": 113,
                                "name": "json",
                                "start": 109,
                                "type": "Identifier",
                              },
                              "start": 100,
                              "type": "MemberExpression",
                            },
                            "end": 115,
                            "optional": false,
                            "start": 100,
                            "type": "CallExpression",
                          },
                          "end": 115,
                          "expression": true,
                          "generator": false,
                          "id": null,
                          "params": [
                            {
                              "end": 95,
                              "name": "response",
                              "start": 87,
                              "type": "Identifier",
                            },
                          ],
                          "start": 86,
                          "type": "ArrowFunctionExpression",
                        },
                      ],
                      "callee": {
                        "computed": false,
                        "end": 85,
                        "object": {
                          "arguments": [
                            {
                              "end": 79,
                              "name": "url",
                              "start": 76,
                              "type": "Identifier",
                            },
                          ],
                          "callee": {
                            "end": 75,
                            "name": "fetch",
                            "start": 70,
                            "type": "Identifier",
                          },
                          "end": 80,
                          "optional": false,
                          "start": 70,
                          "type": "CallExpression",
                        },
                        "optional": false,
                        "property": {
                          "end": 85,
                          "name": "then",
                          "start": 81,
                          "type": "Identifier",
                        },
                        "start": 70,
                        "type": "MemberExpression",
                      },
                      "end": 116,
                      "optional": false,
                      "start": 70,
                      "type": "CallExpression",
                    },
                    "end": 116,
                    "start": 64,
                    "type": "AwaitExpression",
                  },
                  "start": 57,
                  "type": "VariableDeclarator",
                },
              ],
              "end": 117,
              "kind": "const",
              "start": 51,
              "type": "VariableDeclaration",
            },
            {
              "argument": {
                "end": 137,
                "properties": [
                  {
                    "argument": {
                      "end": 135,
                      "name": "json",
                      "start": 131,
                      "type": "Identifier",
                    },
                    "end": 135,
                    "start": 128,
                    "type": "SpreadElement",
                  },
                ],
                "start": 126,
                "type": "ObjectExpression",
              },
              "end": 138,
              "start": 119,
              "type": "ReturnStatement",
            },
          ],
          "end": 140,
          "start": 48,
          "type": "BlockStatement",
        },
        "end": 140,
        "expression": false,
        "generator": false,
        "id": {
          "end": 42,
          "name": "loadResource",
          "start": 30,
          "type": "Identifier",
        },
        "params": [
          {
            "end": 46,
            "name": "url",
            "start": 43,
            "type": "Identifier",
          },
        ],
        "start": 15,
        "type": "FunctionDeclaration",
      },
      "end": 140,
      "start": 0,
      "type": "ExportDefaultDeclaration",
    },
  ],
  "end": 141,
  "hashbang": null,
  "sourceType": "module",
  "start": 0,
  "type": "Program",
}
`;

exports[`AST code generation > code 1`] = `
"const resource = {
  "hi": {"t":0,"b":{"t":2,"i":[{"t":3}],"s":"hi there!"}},
  "hello": {"t":0,"b":{"t":2,"i":[{"t":3}],"s":"hello world!"}},
  "named": {"t":0,"b":{"t":2,"i":[{"t":3,"v":"hi, "},{"t":4,"k":"name"},{"t":3,"v":" !"}]}},
  "list": {"t":0,"b":{"t":2,"i":[{"t":3,"v":"hi, "},{"t":5,"i":0},{"t":3,"v":" !"}]}},
  "literal": {"t":0,"b":{"t":2,"i":[{"t":3},{"t":9},{"t":3}],"s":"hi, kazupon !"}},
  "linked": {"t":0,"b":{"t":2,"i":[{"t":3,"v":"hi, "},{"t":6,"k":{"t":7,"v":"name"}},{"t":3,"v":" !"}]}},
  "plural": {"t":0,"b":{"t":1,"c":[{"t":2,"i":[{"t":6,"k":{"t":9,"v":"no apples"},"m":{"t":8,"v":"caml"}}]},{"t":2,"i":[{"t":5,"i":0},{"t":3,"v":" apple"}]},{"t":2,"i":[{"t":4,"k":"n"},{"t":3,"v":" apples"}]}]}}
}
export default resource"
`;

exports[`array basic > code 1`] = `
"export default function (Component) {
  const _Component = Component
  _Component.__i18n = _Component.__i18n || []
  _Component.__i18n.push({
    "locale": "",
    "resource": {
      "foo": [
        [
          (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize(["bar"])};fn.source="bar";return fn;})(),
          
        ],
        [
          (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize(["baz"])};fn.source="baz";return fn;})(),
          
        ]
      ]
    }
  })
}
"
`;

exports[`array basic > map 1`] = `
{
  "mappings": "",
  "names": [],
  "sources": [],
  "version": 3,
}
`;

exports[`array mixed > code 1`] = `
"export default function (Component) {
  const _Component = Component
  _Component.__i18n = _Component.__i18n || []
  _Component.__i18n.push({
    "locale": "",
    "resource": {
      "foo": [
        {
          "foo": (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize(["foo"])};fn.source="foo";return fn;})()
        },
        [
          (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize(["bar"])};fn.source="bar";return fn;})(),
          [
            {
              "foo": (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize(["foo"])};fn.source="foo";return fn;})()
            },
            (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize(["hoge"])};fn.source="hoge";return fn;})(),
            
          ]
        ],
        (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize(["baz"])};fn.source="baz";return fn;})(),
        [
          (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize(["buz"])};fn.source="buz";return fn;})(),
          
        ]
      ]
    }
  })
}
"
`;

exports[`array mixed > map 1`] = `
{
  "mappings": "",
  "names": [],
  "sources": [],
  "version": 3,
}
`;

exports[`bare > code 1`] = `
"{
  "hello": (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize(["hello world!"])};fn.source="hello world!";return fn;})()
}"
`;

exports[`bare > map 1`] = `
{
  "mappings": "",
  "names": [],
  "sources": [],
  "version": 3,
}
`;

exports[`complex > code 1`] = `
"const val1 = 1;
const resource = {
  "hi": (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize(["hi there!"])};fn.source="hi there!";return fn;})(),
  "nested": {
    "hello": (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize(["hello world!"])};fn.source="hello world!";return fn;})(),
    "more": {
      "plural": (()=>{const fn=(ctx) => {const { normalize: _normalize, linked: _linked, type: _type, interpolate: _interpolate, list: _list, named: _named, plural: _plural } = ctx;return _plural([_normalize([_linked("no apples", "caml", _type)]), _normalize([_interpolate(_list(0)), " apple"]), _normalize([_interpolate(_named("n")), " apples"])])};fn.source="@.caml:{'no apples'} | {0} apple | {n} apples";return fn;})()
    },
    "list": (()=>{const fn=(ctx) => {const { normalize: _normalize, interpolate: _interpolate, list: _list } = ctx;return _normalize(["hi, ", _interpolate(_list(0)), " !"])};fn.source="hi, {0} !";return fn;})()
  },
  "template": (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize(["hello  world!"])};fn.source="hello  world!";return fn;})(),
  "こんにちは": (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize(["こんにちは！"])};fn.source="こんにちは！";return fn;})(),
  "single-quote": (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize(["I don't know!"])};fn.source="I don't know!";return fn;})(),
  "emoji": (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize(["😺"])};fn.source="😺";return fn;})(),
  "unicode": (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize(["A"])};fn.source="A";return fn;})(),
  "unicode-escape": (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize(["\\\\u0041"])};fn.source="\\\\u0041";return fn;})(),
  "backslash-single-quote": (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize(["\\\\'"])};fn.source="\\\\'";return fn;})(),
  "backslash-backslash": (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize(["\\\\\\\\"])};fn.source="\\\\\\\\";return fn;})(),
  "errors": [
    (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize(["ERROR1001"])};fn.source="ERROR1001";return fn;})(),
    (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize(["ERROR1002"])};fn.source="ERROR1002";return fn;})(),
    
  ],
  "complex": {
    "warnings": [
      (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize(["NOTE: This is warning"])};fn.source="NOTE: This is warning";return fn;})(),
      {
        "named-waring": (()=>{const fn=(ctx) => {const { normalize: _normalize, interpolate: _interpolate, named: _named } = ctx;return _normalize(["this is ", _interpolate(_named("type")), " warining"])};fn.source="this is {type} warining";return fn;})()
      }
    ]
  }
}
export default resource"
`;

exports[`complex > map 1`] = `
{
  "mappings": "",
  "names": [],
  "sources": [],
  "version": 3,
}
`;

exports[`force stringify > code 1`] = `
"const val2 = ["hello", "world"];
const val1 = "hello";
const resource = {
  "val2": val2,
  "trueValue": (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize(["true"])};fn.source="true";return fn;})(),
  "falseValue": (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize(["false"])};fn.source="false";return fn;})(),
  "nullValue": (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize(["null"])};fn.source="null";return fn;})(),
  "numberValue": (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize(["1"])};fn.source="1";return fn;})(),
  "funcValue1": function () {
},
  "funcValue2": () => {
},
  "identifier": val1,
  "items": [
    (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize(["null"])};fn.source="null";return fn;})(),
    (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize(["1"])};fn.source="1";return fn;})(),
    {
      "identifier": val1,
      "nullValue": (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize(["null"])};fn.source="null";return fn;})(),
      "numberValue": (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize(["1"])};fn.source="1";return fn;})(),
      
    },
    
  ]
}
export default resource"
`;

exports[`force stringify > map 1`] = `
{
  "mappings": "",
  "names": [],
  "sources": [],
  "version": 3,
}
`;

exports[`html tag in message > code 1`] = `
"{
  "hi": (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize(["&lt;p&gt;hi there!&lt;/p&gt;"])};fn.source="<p>hi there!</p>";return fn;})(),
  "alert": (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize(["&lt;script&gt;window.alert(&apos;hi there!&apos;)&lt;/script&gt;"])};fn.source="<script>window.alert('hi there!')</script>";return fn;})()
}"
`;

exports[`html tag in message > errors 1`] = `
[
  {
    "msg": "Detected HTML in '<p>hi there!</p>' message.",
    "path": "hi",
    "source": "<p>hi there!</p>",
  },
  {
    "msg": "Detected HTML in '<script>window.alert('hi there!')</script>' message.",
    "path": "alert",
    "source": "<script>window.alert('hi there!')</script>",
  },
]
`;

exports[`include function > code 1`] = `
"const resource = {
  "hello": (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize(["hello"])};fn.source="hello";return fn;})(),
  "pagination": {
    "pages": ({named}) => \`\${ named('number') }/page\`,
    "total": ({named}) => \`\${ named('number') } records in total\`
  },
  "foo": {
    "bar": (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize(["bar"])};fn.source="bar";return fn;})()
  }
}
export default resource"
`;

exports[`include function > map 1`] = `
{
  "mappings": "",
  "names": [],
  "sources": [],
  "version": 3,
}
`;

exports[`invalid message syntax > code 1`] = `
"{
  "hello": (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize(["こんにちは"])};fn.source="こんにちは";return fn;})(),
  "this-is-invalid": \`@\`,
  "nested": {
    "array": [
      {
        "this-is-invalid": \`@\`
      }
    ]
  }
}"
`;

exports[`invalid message syntax > errors 1`] = `
[
  {
    "code": 14,
    "domain": "parser",
    "location": {
      "end": {
        "column": 2,
        "line": 1,
        "offset": 1,
      },
      "start": {
        "column": 1,
        "line": 1,
        "offset": 0,
      },
    },
    "msg": "Unexpected lexical analysis in token: 'EOF'",
    "path": "this-is-invalid",
    "source": "@",
  },
  {
    "code": 13,
    "domain": "parser",
    "location": {
      "end": {
        "column": 2,
        "line": 1,
        "offset": 1,
      },
      "start": {
        "column": 2,
        "line": 1,
        "offset": 1,
      },
    },
    "msg": "Unexpected empty linked key",
    "path": "this-is-invalid",
    "source": "@",
  },
  {
    "code": 14,
    "domain": "parser",
    "location": {
      "end": {
        "column": 2,
        "line": 1,
        "offset": 1,
      },
      "start": {
        "column": 1,
        "line": 1,
        "offset": 0,
      },
    },
    "msg": "Unexpected lexical analysis in token: 'EOF'",
    "path": "nested.array.0.this-is-invalid",
    "source": "@",
  },
  {
    "code": 13,
    "domain": "parser",
    "location": {
      "end": {
        "column": 2,
        "line": 1,
        "offset": 1,
      },
      "start": {
        "column": 2,
        "line": 1,
        "offset": 1,
      },
    },
    "msg": "Unexpected empty linked key",
    "path": "nested.array.0.this-is-invalid",
    "source": "@",
  },
]
`;

exports[`invalid message syntax > map 1`] = `
{
  "mappings": "",
  "names": [],
  "sources": [],
  "version": 3,
}
`;

exports[`simple > code 1`] = `
"const resource = {
  "hi": (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize(["hi there!"])};fn.source="hi there!";return fn;})(),
  "hello": (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize(["hello world!"])};fn.source="hello world!";return fn;})(),
  "named": (()=>{const fn=(ctx) => {const { normalize: _normalize, interpolate: _interpolate, named: _named } = ctx;return _normalize(["hi, ", _interpolate(_named("name")), " !"])};fn.source="hi, {name} !";return fn;})(),
  "list": (()=>{const fn=(ctx) => {const { normalize: _normalize, interpolate: _interpolate, list: _list } = ctx;return _normalize(["hi, ", _interpolate(_list(0)), " !"])};fn.source="hi, {0} !";return fn;})(),
  "literal": (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize(["hi, ", "kazupon", " !"])};fn.source="hi, {  'kazupon'  } !";return fn;})(),
  "linked": (()=>{const fn=(ctx) => {const { normalize: _normalize, linked: _linked, type: _type } = ctx;return _normalize(["hi, ", _linked("name", undefined, _type), " !"])};fn.source="hi, @:name !";return fn;})(),
  "plural": (()=>{const fn=(ctx) => {const { normalize: _normalize, linked: _linked, type: _type, interpolate: _interpolate, list: _list, named: _named, plural: _plural } = ctx;return _plural([_normalize([_linked("no apples", "caml", _type)]), _normalize([_interpolate(_list(0)), " apple"]), _normalize([_interpolate(_named("n")), " apples"])])};fn.source="@.caml:{'no apples'} | {0} apple | {n} apples";return fn;})()
}
export default resource"
`;

exports[`simple > map 1`] = `
{
  "mappings": "",
  "names": [],
  "sources": [],
  "version": 3,
}
`;

exports[`unhandling > code 1`] = `
"const val2 = ["hello", "world"];
const val1 = "hello";
const resource = {
  "val2": val2,
  "trueValue": true,
  "falseValue": false,
  "nullValue": null,
  "numberValue": 1,
  "funcValue1": function () {
},
  "funcValue2": () => {
},
  "identifier": val1,
  "items": [
    null,
    1,
    {
      "identifier": val1,
      "nullValue": null,
      "numberValue": 1,
      
    },
    
  ]
}
export default resource"
`;

exports[`unhandling > map 1`] = `
{
  "mappings": "",
  "names": [],
  "sources": [],
  "version": 3,
}
`;
