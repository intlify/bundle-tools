// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`array basic: code 1`] = `
"export default function (Component) {
  Component.__i18n = Component.__i18n || []
  Component.__i18n.push({
    \\"locale\\": \\"\\",
    \\"resource\\": {
      \\"foo\\": [
        [
          (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize([\\"bar\\"])};fn.source=\\"bar\\";return fn;})(),
          
        ],
        [
          (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize([\\"baz\\"])};fn.source=\\"baz\\";return fn;})(),
          
        ],
        
      ]
    }
  })
}"
`;

exports[`array basic: map 1`] = `
Object {
  "mappings": ";wEACKA;wEACAC",
  "names": Array [
    "bar",
    "baz",
  ],
  "sources": Array [
    "vue-i18n-loader.yaml",
  ],
  "sourcesContent": Array [
    "foo:
  - - bar
  - - baz
",
  ],
  "version": 3,
}
`;

exports[`array mixed: code 1`] = `
"export default function (Component) {
  Component.__i18n = Component.__i18n || []
  Component.__i18n.push({
    \\"locale\\": \\"\\",
    \\"resource\\": {
      \\"foo\\": [
        {
          \\"foo\\": (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize([\\"foo\\"])};fn.source=\\"foo\\";return fn;})()
        },
        [
          (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize([\\"bar\\"])};fn.source=\\"bar\\";return fn;})(),
          [
            {
              \\"foo\\": (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize([\\"foo\\"])};fn.source=\\"foo\\";return fn;})()
            },
            (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize([\\"hoge\\"])};fn.source=\\"hoge\\";return fn;})(),
            
          ],
          
        ],
        (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize([\\"baz\\"])};fn.source=\\"baz\\";return fn;})(),
        [
          (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize([\\"buz\\"])};fn.source=\\"buz\\";return fn;})(),
          
        ]
      ]
    }
  })
}"
`;

exports[`array mixed: map 1`] = `
Object {
  "mappings": ";2EACQA;wEACHC;+EACOD;0EACLE;sEACJC;wEACEC",
  "names": Array [
    "foo",
    "bar",
    "hoge",
    "baz",
    "buz",
  ],
  "sources": Array [
    "vue-i18n-loader.yaml",
  ],
  "sourcesContent": Array [
    "foo:
  - foo: 'foo'
  - - bar
    - - foo: 'foo'
      - hoge
  - baz
  - - buz
",
  ],
  "version": 3,
}
`;

exports[`bare: code 1`] = `
"{
  \\"hello\\": (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize([\\"hello world!\\"])};fn.source=\\"hello world!\\";return fn;})()
}"
`;

exports[`bare: map 1`] = `
Object {
  "mappings": "yEAAMA",
  "names": Array [
    "hello world!",
  ],
  "sources": Array [
    "vue-i18n-loader.yaml",
  ],
  "sourcesContent": Array [
    "hello: hello world!
",
  ],
  "version": 3,
}
`;

exports[`bridge with ESM exporting: code 1`] = `
"export default function (Component) {
  Component.options.__i18n = Component.options.__i18n || []
  Component.options.__i18n.push({
    \\"locale\\": \\"\\",
    \\"resource\\": {
      \\"hi\\": (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize([\\"hi there!\\"])};fn.source=\\"hi there!\\";return fn;})(),
      \\"nested\\": {
        \\"hello\\": (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize([\\"hello world!\\"])};fn.source=\\"hello world!\\";return fn;})(),
        \\"more\\": {
          \\"plural\\": (()=>{const fn=(ctx) => {const { normalize: _normalize, linked: _linked, interpolate: _interpolate, list: _list, named: _named, plural: _plural } = ctx;return _plural([_normalize([_linked(\\"no apples\\", \\"caml\\")]), _normalize([_interpolate(_list(0)), \\" apple\\"]), _normalize([_interpolate(_named(\\"n\\")), \\" apples\\"])])};fn.source=\\"@.caml:{'no apples'} | {0} apple | {n} apples\\";return fn;})()
        },
        \\"list\\": (()=>{const fn=(ctx) => {const { normalize: _normalize, interpolate: _interpolate, list: _list } = ctx;return _normalize([\\"hi, \\", _interpolate(_list(0)), \\" !\\"])};fn.source=\\"hi, {0} !\\";return fn;})()
      },
      \\"こんにちは\\": (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize([\\"こんにちは！\\"])};fn.source=\\"こんにちは！\\";return fn;})(),
      \\"single-quote\\": (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize([\\"I don't know!\\"])};fn.source=\\"I don't know!\\";return fn;})(),
      \\"emoji\\": (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize([\\"😺\\"])};fn.source=\\"😺\\";return fn;})(),
      \\"unicode\\": (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize([\\"A\\"])};fn.source=\\"A\\";return fn;})(),
      \\"unicode-escape\\": (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize([\\"\\\\\\\\u0041\\"])};fn.source=\\"\\\\\\\\u0041\\";return fn;})(),
      \\"backslash-single-quote\\": (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize([\\"\\\\\\\\'\\"])};fn.source=\\"\\\\\\\\'\\";return fn;})(),
      \\"backslash-backslash\\": (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize([\\"\\\\\\\\\\\\\\\\\\"])};fn.source=\\"\\\\\\\\\\\\\\\\\\";return fn;})(),
      \\"errors\\": [
        (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize([\\"ERROR1001\\"])};fn.source=\\"ERROR1001\\";return fn;})(),
        (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize([\\"ERROR1002\\"])};fn.source=\\"ERROR1002\\";return fn;})(),
        
      ],
      \\"complex\\": {
        \\"warnings\\": [
          (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize([\\"NOTE: This is warning\\"])};fn.source=\\"NOTE: This is warning\\";return fn;})(),
          {
            \\"named-waring\\": (()=>{const fn=(ctx) => {const { normalize: _normalize, interpolate: _interpolate, named: _named } = ctx;return _normalize([\\"this is \\", _interpolate(_named(\\"type\\")), \\" warining\\"])};fn.source=\\"this is {type} warining\\";return fn;})()
          }
        ]
      }
    }
  })
  Component.options.__i18nBridge = Component.options.__i18nBridge || []
  Component.options.__i18nBridge.push('{
  \\"hi\\": \\"hi there!\\",
  \\"nested\\": {
    \\"hello\\": \\"hello world!\\",
    \\"more\\": {
      \\"plural\\": \\"@.caml:{\\\\u0027no apples\\\\u0027} | {0} apple | {n} apples\\"
    },
    \\"list\\": \\"hi, {0} !\\"
  },
  \\"こんにちは\\": \\"こんにちは！\\",
  \\"single-quote\\": \\"I don\\\\u0027t know!\\",
  \\"emoji\\": \\"😺\\",
  \\"unicode\\": \\"\\\\\\\\u0041\\",
  \\"unicode-escape\\": \\"\\\\\\\\\\\\\\\\u0041\\",
  \\"backslash-single-quote\\": \\"\\\\\\\\\\\\\\\\\\\\u0027\\",
  \\"backslash-backslash\\": \\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",
  \\"errors\\": [\\"ERROR1001\\", \\"ERROR1002\\"],
  \\"complex\\": {
    \\"warnings\\": [
      \\"NOTE: This is warning\\",
      {
        \\"named-waring\\": \\"this is {type} warining\\"
      }
    ]
  }
}
')
  delete Component.options._Ctor
  
}"
`;

exports[`bridge with ESM exporting: map 1`] = `
Object {
  "mappings": "sEAAGA;;6EAEOC;;wLAECC,aAAAC,uBAAAC,wBAAAC,wBAAAC,2BAAAC;kHACJC,QAAAJ,wBAAAK;yEACDC;gFACOC;yEACPC;2EACEC;kFACOC;0FACQC;uFACHC;;sEAEjBC;sEACAC;;;wEAGEC;gIACcC,YAAAC,8BAAAC",
  "names": Array [
    "hi there!",
    "hello world!",
    "no apples",
    "caml",
    "0",
    " apple",
    "n",
    " apples",
    "hi, ",
    " !",
    "こんにちは！",
    "I don't know!",
    "😺",
    "A",
    "\\\\u0041",
    "\\\\'",
    "\\\\\\\\",
    "ERROR1001",
    "ERROR1002",
    "NOTE: This is warning",
    "this is ",
    "type",
    " warining",
  ],
  "sources": Array [
    "vue-i18n-loader.yaml",
  ],
  "sourcesContent": Array [
    "hi: hi there!
nested:
  \\"hello\\": \\"hello world!\\"
  more:
    plural: \\"@.caml:{'no apples'} | {0} apple | {n} apples\\"
  list: hi, {0} !
こんにちは: \\"こんにちは！\\"
single-quote: \\"I don't know!\\"
emoji: 😺
unicode: \\"\\\\u0041\\"
unicode-escape: \\"\\\\\\\\u0041\\"
backslash-single-quote: \\\\'
backslash-backslash: \\\\\\\\
errors:
  - ERROR1001
  - ERROR1002
complex:
  warnings:
    - 'NOTE: This is warning'
    - named-waring: \\"this is {type} warining\\"
",
  ],
  "version": 3,
}
`;

exports[`bridge: code 1`] = `
"module.exports = function (Component) {
  Component.options.__i18n = Component.options.__i18n || []
  Component.options.__i18n.push({
    \\"locale\\": \\"\\",
    \\"resource\\": {
      \\"hi\\": (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize([\\"hi there!\\"])};fn.source=\\"hi there!\\";return fn;})(),
      \\"nested\\": {
        \\"hello\\": (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize([\\"hello world!\\"])};fn.source=\\"hello world!\\";return fn;})(),
        \\"more\\": {
          \\"plural\\": (()=>{const fn=(ctx) => {const { normalize: _normalize, linked: _linked, interpolate: _interpolate, list: _list, named: _named, plural: _plural } = ctx;return _plural([_normalize([_linked(\\"no apples\\", \\"caml\\")]), _normalize([_interpolate(_list(0)), \\" apple\\"]), _normalize([_interpolate(_named(\\"n\\")), \\" apples\\"])])};fn.source=\\"@.caml:{'no apples'} | {0} apple | {n} apples\\";return fn;})()
        },
        \\"list\\": (()=>{const fn=(ctx) => {const { normalize: _normalize, interpolate: _interpolate, list: _list } = ctx;return _normalize([\\"hi, \\", _interpolate(_list(0)), \\" !\\"])};fn.source=\\"hi, {0} !\\";return fn;})()
      },
      \\"こんにちは\\": (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize([\\"こんにちは！\\"])};fn.source=\\"こんにちは！\\";return fn;})(),
      \\"single-quote\\": (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize([\\"I don't know!\\"])};fn.source=\\"I don't know!\\";return fn;})(),
      \\"emoji\\": (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize([\\"😺\\"])};fn.source=\\"😺\\";return fn;})(),
      \\"unicode\\": (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize([\\"A\\"])};fn.source=\\"A\\";return fn;})(),
      \\"unicode-escape\\": (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize([\\"\\\\\\\\u0041\\"])};fn.source=\\"\\\\\\\\u0041\\";return fn;})(),
      \\"backslash-single-quote\\": (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize([\\"\\\\\\\\'\\"])};fn.source=\\"\\\\\\\\'\\";return fn;})(),
      \\"backslash-backslash\\": (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize([\\"\\\\\\\\\\\\\\\\\\"])};fn.source=\\"\\\\\\\\\\\\\\\\\\";return fn;})(),
      \\"errors\\": [
        (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize([\\"ERROR1001\\"])};fn.source=\\"ERROR1001\\";return fn;})(),
        (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize([\\"ERROR1002\\"])};fn.source=\\"ERROR1002\\";return fn;})(),
        
      ],
      \\"complex\\": {
        \\"warnings\\": [
          (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize([\\"NOTE: This is warning\\"])};fn.source=\\"NOTE: This is warning\\";return fn;})(),
          {
            \\"named-waring\\": (()=>{const fn=(ctx) => {const { normalize: _normalize, interpolate: _interpolate, named: _named } = ctx;return _normalize([\\"this is \\", _interpolate(_named(\\"type\\")), \\" warining\\"])};fn.source=\\"this is {type} warining\\";return fn;})()
          }
        ]
      }
    }
  })
  Component.options.__i18nBridge = Component.options.__i18nBridge || []
  Component.options.__i18nBridge.push('{
  \\"hi\\": \\"hi there!\\",
  \\"nested\\": {
    \\"hello\\": \\"hello world!\\",
    \\"more\\": {
      \\"plural\\": \\"@.caml:{\\\\u0027no apples\\\\u0027} | {0} apple | {n} apples\\"
    },
    \\"list\\": \\"hi, {0} !\\"
  },
  \\"こんにちは\\": \\"こんにちは！\\",
  \\"single-quote\\": \\"I don\\\\u0027t know!\\",
  \\"emoji\\": \\"😺\\",
  \\"unicode\\": \\"\\\\\\\\u0041\\",
  \\"unicode-escape\\": \\"\\\\\\\\\\\\\\\\u0041\\",
  \\"backslash-single-quote\\": \\"\\\\\\\\\\\\\\\\\\\\u0027\\",
  \\"backslash-backslash\\": \\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",
  \\"errors\\": [\\"ERROR1001\\", \\"ERROR1002\\"],
  \\"complex\\": {
    \\"warnings\\": [
      \\"NOTE: This is warning\\",
      {
        \\"named-waring\\": \\"this is {type} warining\\"
      }
    ]
  }
}
')
  delete Component.options._Ctor
  
}"
`;

exports[`bridge: map 1`] = `
Object {
  "mappings": "sEAAGA;;6EAEOC;;wLAECC,aAAAC,uBAAAC,wBAAAC,wBAAAC,2BAAAC;kHACJC,QAAAJ,wBAAAK;yEACDC;gFACOC;yEACPC;2EACEC;kFACOC;0FACQC;uFACHC;;sEAEjBC;sEACAC;;;wEAGEC;gIACcC,YAAAC,8BAAAC",
  "names": Array [
    "hi there!",
    "hello world!",
    "no apples",
    "caml",
    "0",
    " apple",
    "n",
    " apples",
    "hi, ",
    " !",
    "こんにちは！",
    "I don't know!",
    "😺",
    "A",
    "\\\\u0041",
    "\\\\'",
    "\\\\\\\\",
    "ERROR1001",
    "ERROR1002",
    "NOTE: This is warning",
    "this is ",
    "type",
    " warining",
  ],
  "sources": Array [
    "vue-i18n-loader.yaml",
  ],
  "sourcesContent": Array [
    "hi: hi there!
nested:
  \\"hello\\": \\"hello world!\\"
  more:
    plural: \\"@.caml:{'no apples'} | {0} apple | {n} apples\\"
  list: hi, {0} !
こんにちは: \\"こんにちは！\\"
single-quote: \\"I don't know!\\"
emoji: 😺
unicode: \\"\\\\u0041\\"
unicode-escape: \\"\\\\\\\\u0041\\"
backslash-single-quote: \\\\'
backslash-backslash: \\\\\\\\
errors:
  - ERROR1001
  - ERROR1002
complex:
  warnings:
    - 'NOTE: This is warning'
    - named-waring: \\"this is {type} warining\\"
",
  ],
  "version": 3,
}
`;

exports[`invalid message syntax: code 1`] = `
"{
  \\"hello\\": (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize([\\"こんにちは\\"])};fn.source=\\"こんにちは\\";return fn;})(),
  \\"this-is-ivalid\\": @
}"
`;

exports[`invalid message syntax: errors 1`] = `
Array [
  Object {
    "code": 14,
    "domain": "parser",
    "location": Object {
      "end": Object {
        "column": 2,
        "line": 1,
        "offset": 1,
      },
      "start": Object {
        "column": 1,
        "line": 1,
        "offset": 0,
      },
    },
    "msg": "Unexpected lexical analysis in token: 'EOF'",
    "source": "@",
  },
  Object {
    "code": 13,
    "domain": "parser",
    "location": Object {
      "end": Object {
        "column": 2,
        "line": 1,
        "offset": 1,
      },
      "start": Object {
        "column": 2,
        "line": 1,
        "offset": 1,
      },
    },
    "msg": "Unexpected empty linked key",
    "source": "@",
  },
]
`;

exports[`invalid message syntax: map 1`] = `
Object {
  "mappings": "yEAAMA;2GACSC",
  "names": Array [
    "こんにちは",
    "",
  ],
  "sources": Array [
    "vue-i18n-loader.yaml",
  ],
  "sourcesContent": Array [
    "hello: こんにちは
this-is-ivalid: '@' # is this ivalid?
",
  ],
  "version": 3,
}
`;

exports[`useClassComponent: code 1`] = `
"export default function (Component) {
  Component.__o.__i18n = Component.__o.__i18n || []
  Component.__o.__i18n.push({
    \\"locale\\": \\"\\",
    \\"resource\\": {
      \\"hi\\": (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize([\\"hi there!\\"])};fn.source=\\"hi there!\\";return fn;})(),
      \\"nested\\": {
        \\"hello\\": (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize([\\"hello world!\\"])};fn.source=\\"hello world!\\";return fn;})(),
        \\"more\\": {
          \\"plural\\": (()=>{const fn=(ctx) => {const { normalize: _normalize, linked: _linked, interpolate: _interpolate, list: _list, named: _named, plural: _plural } = ctx;return _plural([_normalize([_linked(\\"no apples\\", \\"caml\\")]), _normalize([_interpolate(_list(0)), \\" apple\\"]), _normalize([_interpolate(_named(\\"n\\")), \\" apples\\"])])};fn.source=\\"@.caml:{'no apples'} | {0} apple | {n} apples\\";return fn;})()
        },
        \\"list\\": (()=>{const fn=(ctx) => {const { normalize: _normalize, interpolate: _interpolate, list: _list } = ctx;return _normalize([\\"hi, \\", _interpolate(_list(0)), \\" !\\"])};fn.source=\\"hi, {0} !\\";return fn;})()
      },
      \\"こんにちは\\": (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize([\\"こんにちは！\\"])};fn.source=\\"こんにちは！\\";return fn;})(),
      \\"single-quote\\": (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize([\\"I don't know!\\"])};fn.source=\\"I don't know!\\";return fn;})(),
      \\"emoji\\": (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize([\\"😺\\"])};fn.source=\\"😺\\";return fn;})(),
      \\"unicode\\": (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize([\\"A\\"])};fn.source=\\"A\\";return fn;})(),
      \\"unicode-escape\\": (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize([\\"\\\\\\\\u0041\\"])};fn.source=\\"\\\\\\\\u0041\\";return fn;})(),
      \\"backslash-single-quote\\": (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize([\\"\\\\\\\\'\\"])};fn.source=\\"\\\\\\\\'\\";return fn;})(),
      \\"backslash-backslash\\": (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize([\\"\\\\\\\\\\\\\\\\\\"])};fn.source=\\"\\\\\\\\\\\\\\\\\\";return fn;})(),
      \\"errors\\": [
        (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize([\\"ERROR1001\\"])};fn.source=\\"ERROR1001\\";return fn;})(),
        (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize([\\"ERROR1002\\"])};fn.source=\\"ERROR1002\\";return fn;})(),
        
      ],
      \\"complex\\": {
        \\"warnings\\": [
          (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize([\\"NOTE: This is warning\\"])};fn.source=\\"NOTE: This is warning\\";return fn;})(),
          {
            \\"named-waring\\": (()=>{const fn=(ctx) => {const { normalize: _normalize, interpolate: _interpolate, named: _named } = ctx;return _normalize([\\"this is \\", _interpolate(_named(\\"type\\")), \\" warining\\"])};fn.source=\\"this is {type} warining\\";return fn;})()
          }
        ]
      }
    }
  })
}"
`;

exports[`useClassComponent: map 1`] = `
Object {
  "mappings": "sEAAGA;;6EAEOC;;wLAECC,aAAAC,uBAAAC,wBAAAC,wBAAAC,2BAAAC;kHACJC,QAAAJ,wBAAAK;yEACDC;gFACOC;yEACPC;2EACEC;kFACOC;0FACQC;uFACHC;;sEAEjBC;sEACAC;;;wEAGEC;gIACcC,YAAAC,8BAAAC",
  "names": Array [
    "hi there!",
    "hello world!",
    "no apples",
    "caml",
    "0",
    " apple",
    "n",
    " apples",
    "hi, ",
    " !",
    "こんにちは！",
    "I don't know!",
    "😺",
    "A",
    "\\\\u0041",
    "\\\\'",
    "\\\\\\\\",
    "ERROR1001",
    "ERROR1002",
    "NOTE: This is warning",
    "this is ",
    "type",
    " warining",
  ],
  "sources": Array [
    "vue-i18n-loader.yaml",
  ],
  "sourcesContent": Array [
    "hi: hi there!
nested:
  \\"hello\\": \\"hello world!\\"
  more:
    plural: \\"@.caml:{'no apples'} | {0} apple | {n} apples\\"
  list: hi, {0} !
こんにちは: \\"こんにちは！\\"
single-quote: \\"I don't know!\\"
emoji: 😺
unicode: \\"\\\\u0041\\"
unicode-escape: \\"\\\\\\\\u0041\\"
backslash-single-quote: \\\\'
backslash-backslash: \\\\\\\\
errors:
  - ERROR1001
  - ERROR1002
complex:
  warnings:
    - 'NOTE: This is warning'
    - named-waring: \\"this is {type} warining\\"
",
  ],
  "version": 3,
}
`;

exports[`yaml: code 1`] = `
"export default {
  \\"hi\\": (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize([\\"hi there!\\"])};fn.source=\\"hi there!\\";return fn;})(),
  \\"nested\\": {
    \\"hello\\": (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize([\\"hello world!\\"])};fn.source=\\"hello world!\\";return fn;})(),
    \\"more\\": {
      \\"plural\\": (()=>{const fn=(ctx) => {const { normalize: _normalize, linked: _linked, interpolate: _interpolate, list: _list, named: _named, plural: _plural } = ctx;return _plural([_normalize([_linked(\\"no apples\\", \\"caml\\")]), _normalize([_interpolate(_list(0)), \\" apple\\"]), _normalize([_interpolate(_named(\\"n\\")), \\" apples\\"])])};fn.source=\\"@.caml:{'no apples'} | {0} apple | {n} apples\\";return fn;})()
    },
    \\"list\\": (()=>{const fn=(ctx) => {const { normalize: _normalize, interpolate: _interpolate, list: _list } = ctx;return _normalize([\\"hi, \\", _interpolate(_list(0)), \\" !\\"])};fn.source=\\"hi, {0} !\\";return fn;})()
  },
  \\"こんにちは\\": (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize([\\"こんにちは！\\"])};fn.source=\\"こんにちは！\\";return fn;})(),
  \\"single-quote\\": (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize([\\"I don't know!\\"])};fn.source=\\"I don't know!\\";return fn;})(),
  \\"emoji\\": (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize([\\"😺\\"])};fn.source=\\"😺\\";return fn;})(),
  \\"unicode\\": (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize([\\"A\\"])};fn.source=\\"A\\";return fn;})(),
  \\"unicode-escape\\": (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize([\\"\\\\\\\\u0041\\"])};fn.source=\\"\\\\\\\\u0041\\";return fn;})(),
  \\"backslash-single-quote\\": (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize([\\"\\\\\\\\'\\"])};fn.source=\\"\\\\\\\\'\\";return fn;})(),
  \\"backslash-backslash\\": (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize([\\"\\\\\\\\\\\\\\\\\\"])};fn.source=\\"\\\\\\\\\\\\\\\\\\";return fn;})(),
  \\"errors\\": [
    (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize([\\"ERROR1001\\"])};fn.source=\\"ERROR1001\\";return fn;})(),
    (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize([\\"ERROR1002\\"])};fn.source=\\"ERROR1002\\";return fn;})(),
    
  ],
  \\"complex\\": {
    \\"warnings\\": [
      (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize([\\"NOTE: This is warning\\"])};fn.source=\\"NOTE: This is warning\\";return fn;})(),
      {
        \\"named-waring\\": (()=>{const fn=(ctx) => {const { normalize: _normalize, interpolate: _interpolate, named: _named } = ctx;return _normalize([\\"this is \\", _interpolate(_named(\\"type\\")), \\" warining\\"])};fn.source=\\"this is {type} warining\\";return fn;})()
      }
    ]
  }
}"
`;

exports[`yaml: map 1`] = `
Object {
  "mappings": "sEAAGA;;6EAEOC;;wLAECC,aAAAC,uBAAAC,wBAAAC,wBAAAC,2BAAAC;kHACJC,QAAAJ,wBAAAK;yEACDC;gFACOC;yEACPC;2EACEC;kFACOC;0FACQC;uFACHC;;sEAEjBC;sEACAC;;;wEAGEC;gIACcC,YAAAC,8BAAAC",
  "names": Array [
    "hi there!",
    "hello world!",
    "no apples",
    "caml",
    "0",
    " apple",
    "n",
    " apples",
    "hi, ",
    " !",
    "こんにちは！",
    "I don't know!",
    "😺",
    "A",
    "\\\\u0041",
    "\\\\'",
    "\\\\\\\\",
    "ERROR1001",
    "ERROR1002",
    "NOTE: This is warning",
    "this is ",
    "type",
    " warining",
  ],
  "sources": Array [
    "vue-i18n-loader.yaml",
  ],
  "sourcesContent": Array [
    "hi: hi there!
nested:
  \\"hello\\": \\"hello world!\\"
  more:
    plural: \\"@.caml:{'no apples'} | {0} apple | {n} apples\\"
  list: hi, {0} !
こんにちは: \\"こんにちは！\\"
single-quote: \\"I don't know!\\"
emoji: 😺
unicode: \\"\\\\u0041\\"
unicode-escape: \\"\\\\\\\\u0041\\"
backslash-single-quote: \\\\'
backslash-backslash: \\\\\\\\
errors:
  - ERROR1001
  - ERROR1002
complex:
  warnings:
    - 'NOTE: This is warning'
    - named-waring: \\"this is {type} warining\\"
",
  ],
  "version": 3,
}
`;

exports[`yml: code 1`] = `
"export default {
  \\"hi\\": (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize([\\"hi there!\\"])};fn.source=\\"hi there!\\";return fn;})(),
  \\"nested\\": {
    \\"hello\\": (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize([\\"hello world!\\"])};fn.source=\\"hello world!\\";return fn;})(),
    \\"more\\": {
      \\"plural\\": (()=>{const fn=(ctx) => {const { normalize: _normalize, linked: _linked, interpolate: _interpolate, list: _list, named: _named, plural: _plural } = ctx;return _plural([_normalize([_linked(\\"no apples\\", \\"caml\\")]), _normalize([_interpolate(_list(0)), \\" apple\\"]), _normalize([_interpolate(_named(\\"n\\")), \\" apples\\"])])};fn.source=\\"@.caml:{'no apples'} | {0} apple | {n} apples\\";return fn;})()
    },
    \\"list\\": (()=>{const fn=(ctx) => {const { normalize: _normalize, interpolate: _interpolate, list: _list } = ctx;return _normalize([\\"hi, \\", _interpolate(_list(0)), \\" !\\"])};fn.source=\\"hi, {0} !\\";return fn;})()
  },
  \\"こんにちは\\": (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize([\\"こんにちは！\\"])};fn.source=\\"こんにちは！\\";return fn;})(),
  \\"single-quote\\": (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize([\\"I don't know!\\"])};fn.source=\\"I don't know!\\";return fn;})(),
  \\"emoji\\": (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize([\\"😺\\"])};fn.source=\\"😺\\";return fn;})(),
  \\"unicode\\": (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize([\\"A\\"])};fn.source=\\"A\\";return fn;})(),
  \\"unicode-escape\\": (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize([\\"\\\\\\\\u0041\\"])};fn.source=\\"\\\\\\\\u0041\\";return fn;})(),
  \\"backslash-single-quote\\": (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize([\\"\\\\\\\\'\\"])};fn.source=\\"\\\\\\\\'\\";return fn;})(),
  \\"backslash-backslash\\": (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize([\\"\\\\\\\\\\\\\\\\\\"])};fn.source=\\"\\\\\\\\\\\\\\\\\\";return fn;})(),
  \\"errors\\": [
    (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize([\\"ERROR1001\\"])};fn.source=\\"ERROR1001\\";return fn;})(),
    (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize([\\"ERROR1002\\"])};fn.source=\\"ERROR1002\\";return fn;})(),
    
  ],
  \\"complex\\": {
    \\"warnings\\": [
      (()=>{const fn=(ctx) => {const { normalize: _normalize } = ctx;return _normalize([\\"NOTE: This is warning\\"])};fn.source=\\"NOTE: This is warning\\";return fn;})(),
      {
        \\"named-waring\\": (()=>{const fn=(ctx) => {const { normalize: _normalize, interpolate: _interpolate, named: _named } = ctx;return _normalize([\\"this is \\", _interpolate(_named(\\"type\\")), \\" warining\\"])};fn.source=\\"this is {type} warining\\";return fn;})()
      }
    ]
  }
}"
`;

exports[`yml: map 1`] = `
Object {
  "mappings": "sEAAGA;;6EAEOC;;wLAECC,aAAAC,uBAAAC,wBAAAC,wBAAAC,2BAAAC;kHACJC,QAAAJ,wBAAAK;yEACDC;gFACOC;yEACPC;2EACEC;kFACOC;0FACQC;uFACHC;;sEAEjBC;sEACAC;;;wEAGEC;gIACcC,YAAAC,8BAAAC",
  "names": Array [
    "hi there!",
    "hello world!",
    "no apples",
    "caml",
    "0",
    " apple",
    "n",
    " apples",
    "hi, ",
    " !",
    "こんにちは！",
    "I don't know!",
    "😺",
    "A",
    "\\\\u0041",
    "\\\\'",
    "\\\\\\\\",
    "ERROR1001",
    "ERROR1002",
    "NOTE: This is warning",
    "this is ",
    "type",
    " warining",
  ],
  "sources": Array [
    "vue-i18n-loader.yaml",
  ],
  "sourcesContent": Array [
    "hi: hi there!
nested:
  \\"hello\\": \\"hello world!\\"
  more:
    plural: \\"@.caml:{'no apples'} | {0} apple | {n} apples\\"
  list: hi, {0} !
こんにちは: \\"こんにちは！\\"
single-quote: \\"I don't know!\\"
emoji: 😺
unicode: \\"\\\\u0041\\"
unicode-escape: \\"\\\\\\\\u0041\\"
backslash-single-quote: \\\\'
backslash-backslash: \\\\\\\\
errors:
  - ERROR1001
  - ERROR1002
complex:
  warnings:
    - 'NOTE: This is warning'
    - named-waring: \\"this is {type} warining\\"
",
  ],
  "version": 3,
}
`;
